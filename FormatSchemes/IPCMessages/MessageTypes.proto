syntax = "proto3";

package missiondmx.fish.ipcmessages;

option optimize_for = LITE_RUNTIME;

enum MsgType {
 MSGT_NOTHING = 0;
 MSGT_UPDATE_STATE = 1;
 MSGT_CURRENT_STATE_UPDATE = 2;
 MSGT_UNIVERSE = 3;
 MSGT_UNIVERSE_LIST = 4;
 MSGT_REQUEST_UNIVERSE_LIST = 5;
 MSGT_DELETE_UNIVERSE = 6;
 MSGT_BUTTON_STATE_CHANGE = 7; // Console.button_state_change
 MSGT_FADER_POSITION = 8;
 MSGT_ROTARY_ENCODER_CHANGE = 9;
 MSGT_DMX_OUTPUT = 10;
 MSGT_REQUEST_DMX_DATA = 11;
 MSGT_ENTER_SCENE = 12;
 MSGT_LOAD_SHOW_FILE = 13;
 MSGT_UPDATE_PARAMETER = 14; // This message updates parameters of running filters when sent to fish, and notifies the GUI about state changes by running filters, when sent to the GUI
 MSGT_LOG_MESSAGE = 15;
 MSGT_REMOVE_FADER_BANK_SET = 16;
 MSGT_ADD_FADER_BANK_SET = 17;
 MSGT_DESK_UPDATE = 18;
 MSGT_UPDATE_COLUMN = 19; // Console.fader_column
 MSGT_STATE_LIST = 20; // If fish receives this message empty: it will reply with the same message type, filled in with all states. Otherwise this triggers an update of all specified states
 MSGT_EVENT_SENDER_UPDATE = 21; // If fish receives such a message it will create or update the specified sender. If a GUI connects to fish, all configured event senders will be send to the GUI. If an event sender changed, all connected GUI clients will receive a corresponding message.
 MSGT_EVNT = 22; // If a GUI client sends such a message, the event will be inserted into the buffer. If an event_sender with enabled gui debugging send a new event, all connected GUI clients will receive such a message with the new event.
}
