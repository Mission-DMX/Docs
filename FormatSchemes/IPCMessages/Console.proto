syntax = "proto3";

package missiondmx.fish.ipcmessages;

option optimize_for = LITE_RUNTIME;

/*
 * This file specifies messages and types used for controlling the physical user interface
 */

 enum ButtonState {
   BS_SET_LED_NOT_ACTIVE = 0;
   BS_ACTIVE = 1;
   BS_SET_LED_BLINKING = 2;
   BS_BUTTON_PRESSED = 3;
   BS_BUTTON_RELEASED = 4;
 }

 // This enum defines all buttons but some are internally handled by the driver and wont be commited
 enum ButtonCode {
   // Until BTN_TRACK_EDITSHOW (excluding) the following buttons are handled internally by the driver.
   BTN_CH1_ENCODER_ROTARYMODE = 0; // Switches rotary encoder between Hue; Saturation and (if applicable) UV and (if applicable) Amber; Second row of LCD displays mode and setting
   BTN_CH2_ENCODER_ROTARYMODE = 1;
   BTN_CH3_ENCODER_ROTARYMODE = 2;
   BTN_CH4_ENCODER_ROTARYMODE = 3;
   BTN_CH5_ENCODER_ROTARYMODE = 4;
   BTN_CH6_ENCODER_ROTARYMODE = 5;
   BTN_CH7_ENCODER_ROTARYMODE = 6;
   BTN_CH8_ENCODER_ROTARYMODE = 7;
   BTN_CH1_REC_READY = 8; // If ready is enabled (blinking red); the entered changes of the channel are not applied until the COMMITRDY button is pressed.
   BTN_CH2_REC_READY = 9;
   BTN_CH3_REC_READY = 10;
   BTN_CH4_REC_READY = 11;
   BTN_CH5_REC_READY = 12;
   BTN_CH6_REC_READY = 13;
   BTN_CH7_REC_READY = 14;
   BTN_CH8_REC_READY = 15;
   BTN_CH1_SOLO_FLASH = 16; // Documented in x-touch driver
   BTN_CH2_SOLO_FLASH = 17;
   BTN_CH3_SOLO_FLASH = 18;
   BTN_CH4_SOLO_FLASH = 19;
   BTN_CH5_SOLO_FLASH = 20;
   BTN_CH6_SOLO_FLASH = 21;
   BTN_CH7_SOLO_FLASH = 22;
   BTN_CH8_SOLO_FLASH = 23;
   BTN_CH1_MUTE_BLACK = 24; // Make the brightness output of this lamp zero; button led should be blinking if enabled
   BTN_CH2_MUTE_BLACK = 25;
   BTN_CH3_MUTE_BLACK = 26;
   BTN_CH4_MUTE_BLACK = 27;
   BTN_CH5_MUTE_BLACK = 28;
   BTN_CH6_MUTE_BLACK = 29;
   BTN_CH7_MUTE_BLACK = 30;
   BTN_CH8_MUTE_BLACK = 31;
   BTN_CH1_SELECT_SELECT = 32; // Select this column for linked linked advanced input; led is activated if selected
   BTN_CH2_SELECT_SELECT = 33;
   BTN_CH3_SELECT_SELECT = 34;
   BTN_CH4_SELECT_SELECT = 35;
   BTN_CH5_SELECT_SELECT = 36;
   BTN_CH6_SELECT_SELECT = 37;
   BTN_CH7_SELECT_SELECT = 38;
   BTN_CH8_SELECT_SELECT = 39;
   // End of block of internally handled buttons
   BTN_TRACK_CONSOLE = 40; // Show the direct console and ask if fish should switch to direct mode if it is in filter mode
   BTN_PAN_EDITSHOW = 41; // Open the show file editor
   BTN_EQ_SHOWUI = 42; // Open the show UI display and ask if fish should switch to filter mode if it is in direct mode
   BTN_SEND_VISUALIZER = 43; // Open the visualizer view in the current open window
   BTN_PLUGIN_PATCH = 44; // Open the patching menu and review current transmitted values
   BTN_INST_DEBUG = 45; // Open the debug view

   BTN_NAMEVALUE_COMMITSHOW = 46; // Apply the changes of the edited show
   BTN_BEATS_OOPS = 47; // Undo the commit of show file or column updates (whichever was last); internally handled
   BTN_GLOBALVIEW_COMMITRDY = 48; // Apply the chanes of all columns in READY-Mode; is blinking as long as some colums are in Ready/Wait mode; internally handled
   BTN_MIDITRACKS_FIND = 49; // Find fixture button, further documentation in x-touch driver
   BTN_INPUTS_EVENTS = 50; // Configure event sources and review incomming data
   BTN_AUDIOTRACKS = 51;
   BTN_AUDIOINST = 52;
   BTN_AUX_ASSETS = 53; // Open the assets manager
   BTN_BUSSES = 54;
   BTN_OUTPUTS = 55;
   BTN_USER = 56;

   BTN_FLIP_MAINDARK = 57; // If enabled: makes the brightness of all attached fixtures 0; button led should be blinking if enabled

   BTN_F1_F1 = 58; // Assignable macro keys
   BTN_F2_F2 = 59;
   BTN_F3_F3 = 60;
   BTN_F4_F4 = 61;
   BTN_F5_F5 = 62;
   BTN_F6_F6 = 63;
   BTN_F7_F7 = 64;
   BTN_F8_F8 = 65;

   BTN_SHIFT = 66;
   BTN_OPTION = 67;
   BTN_CONTROL = 73;
   BTN_ALT = 74;
   BTN_READOFF_GOTO = 68; // Switch to a specific GUI page based on the input typed into the keypad.
   BTN_WRITE_MOVEWINDOW = 69; // If the button is pressed together with the buttons described next, it will move the selected window, using the F-Keys
   // to the selected workspace(F1 = Workspace 1 etc.) and using the Arrow keys to move it across the current Workspace. If it is pressed without these
   // buttons it enters window selection mode (where the button is blinking) and the arrow keys can be used for window selection. In Window selection
   // mode a floating window should show up for selection of vertical or horizontal tiling mode.
   BTN_TOUCH = 75;
   BTN_LATCH = 76;
   BTN_TRIM = 70;
   BTN_GROUP = 77;

   BTN_SAVE_SAVE = 71; // Save show file; when in editor; save universe values when in quick console mode
   BTN_UNDO_UNDO = 72; // Undo the changes made in the editor or quick console
   BTN_CANCEL_CANCEL = 78; // Cancle the setting of a filter configuration
   BTN_ENTER_ENTER = 79; // Submit the change of a filter configuration

   BTN_MARKER_GOBO = 80; // When channel selected edit gobo of channel; when no channel selected edit default/global gobo; when continiously pressed: use jogwheel to change gobo
   BTN_NUDGE_STROBO = 81; // When channel selected edit strobe of connected fixture; when no channel selected edit global strobe frequency; when continiously pressed: use jogwheel to change strobe settings
   BTN_CYCLE_SHUTTER = 82; // When channel selected edit shutter of connected fixture; when no channel selected edit global shutter value; continiously pressed: use jogwheel
   BTN_DROP_COLOR = 83; // Use color picker to edit color of fixture (if input selected) or global color. Jogwheel might be used for precise editing if button is continiously pressed
   BTN_REPLACE_TEMPERATURE = 84; // Edit color temperature of single or global color; jogwheel might be used as well
   BTN_CLICK_IMAGE = 85; // Select image send to shader or pixel mapper of selected column
   BTN_SOLO_SPEED = 86; // Select speed pattern of corresponding fixture

   // These buttons are useful for editing / playing Cues ans well as MIDI sequencing; button leds shall be lit; when the functionality is avaiable
   BTN_REV_LASTCUE = 87; // (⏪) Go to previous Cue
   BTN_FF_NEXTCUE = 88; // (⏩) Go to next Cue
   BTN_STOP_STOPCUE = 89; // (⏹) Stop (pause and goto start) execution of current Cue
   BTN_PLAY_RUNCUE = 90; // (⏵) Play/Pause execution of current Cue (blinking if paused)
   BTN_REC_RECFRAME = 91; // (⏺) Insert keyframe at current cursor position with current scene settings

   BTN_FADERBANKPREV_FADERBANKPREV = 92; // Go to the previous fader bank (when in quick console mode: touchscreen should also scroll with faders); internally handled
   BTN_FADERBANKNEXT_FADERBANKNEXT = 93; // Go to the next fader bank; internally handled
   BTN_CHPREV_UNIVERSEPREV = 94; // When in quick console mode: jump to previous universe; when in Show (edit) mode: jump to previous UI page on primary display
   BTN_CHNEXT_UNIVERSENEXT = 95; // When in quick console mode: jump to next universe; when in Show (edit) mode: jump to next UI page on primary display

   BTN_SCRUB_JOGWHEELMODESWITCH = 101; // If this button is pressed, the jog wheel isn't used for navigation but changing the navigation speed (zoom in timelines)
   BTN_CROSSENTER = 100;
   BTN_UP_UP = 96; // Key up; or when MH advanced edit selected: Zoom+
   BTN_DOWN_DOWN = 97; // Key down; or when MH advanced edit selected: Zoom-
   BTN_RIGHT_RIGHT = 99; // Key right; or when MH advanced edit selected: Focus+
   BTN_LEFT_LEFT = 98; // Key left; or when MH advanced edit selected: Focus-

   FADERTOUCH_CH1 = 110; // These cannot be used as led ids but can be used for event decoding
   FADERTOUCH_CH2 = 111;
   FADERTOUCH_CH3 = 112;
   FADERTOUCH_CH4 = 113;
   FADERTOUCH_CH5 = 114;
   FADERTOUCH_CH6 = 115;
   FADERTOUCH_CH7 = 116;
   FADERTOUCH_CH8 = 117;
   FADERTOUCH_MAIN = 118;
 }

 // This message can be send both ways:
 // Fish -> UI: if a button was pressed
 // UI -> Fish: Change the LED of a button
 // The UI won't be informed about button presses that are handled internally by the driver.
 message button_state_change {
   ButtonCode button = 1;
   ButtonState new_state = 2;
 }

// This message can be used to set the fader position or be notified about a change done by the user
 message fader_position {
   string column_id = 1;
   uint32 position = 2;
 }

// This message informs the UI about a rotary encoder change
// A positive value encodes n steps clock wise
 message rotary_encoder_change {
   string column_id = 1;
   sint32 amount = 2;
 }
 
 message remove_fader_bank_set {
   string bank_id = 1;
 }
 
 enum lcd_color {
   black = 0;
   red = 1;
   green = 2;
   yellow = 3;
   blue = 4;
   magenta = 5;
   cyan = 6;
   white = 7;
 }

 // This message will be send to the UI if the state of the input desk changes
 // If this message will be send to Fish, it will be used to set the state of the desk
 message desk_update {
     string selected_column_id = 1;
     string find_active_on_column_id = 2;
     sint32 jogwheel_change_since_last_update = 3; // only Fish -> UI
     string selected_bank_set = 4;
     uint32 selected_bank = 5;
     string seven_seg_display_data = 6; // only UI -> Fish
 }

 message fader_column {
     string column_id = 1;
     string upper_display_text = 3;
     string lower_display_text = 4;
     lcd_color display_color = 5;
     
     message hsi_color {
       double hue = 1;
       double saturation = 2;
       double intensity = 3;
     }
     
     message hsi_u_color {
       hsi_color base = 1;
       uint32 uv = 2;
     }
     
     message raw_fader_data {
       uint32 fader = 1;
       sint32 rotary_position = 2;
       uint32 meter_leds = 3;
       ButtonState select = 4;
       ButtonState b1 = 5;
       ButtonState b2 = 6;
       ButtonState b3 = 7;
     }
     
     oneof value {
       hsi_color plain_color = 6;
       hsi_u_color color_with_uv = 7;
       raw_fader_data raw_data = 8;
     }

     bool top_lcd_row_inverted = 9;
     bool bottom_lcd_row_inverted = 10;
   }
 
 message add_fader_bank_set {
   // This message defines a fader bank. Please be aware that it is not possible
   // to use more columns than there are physically on the board. For example 8 if
   // only a single X-Touch is attached.
   message fader_bank {
     repeated fader_column cols = 1;
   }
 
   string bank_id = 1;
   uint32 default_active_fader_bank = 2;
   repeated fader_bank banks = 3;
 }
